# -*- coding: utf-8 -*-
"""DL Project - Group 3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15W_U087HNi9Z-x5QzecmcFNNOw6Mi4dF
"""

from google.colab import drive
drive.mount('/content/drive')

cd /content/drive/MyDrive/DL Project/Dataset

import tensorflow as tf
import tensorflow_hub as hub
import numpy as np
import os
import matplotlib.pyplot as plt
import pandas as pd
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from keras.layers import Input, Dense, Conv2D, Activation, MaxPool2D, Flatten, Dropout
from keras.models import Sequential, Model
from tensorflow import keras
from tensorflow.keras.layers import LSTM
from sklearn.model_selection import train_test_split
from keras.optimizers import SGD

female_train_path= '/content/drive/MyDrive/DL Project/Dataset/Train/Female'
male_train_path= '/content/drive/MyDrive/DL Project/Dataset/Train/Male'
female_test_path='/content/drive/MyDrive/DL Project/Dataset/Test/Female'
male_test_path='/content/drive/MyDrive/DL Project/Dataset/Test/Male'

"""Visualize Classes"""

# Count the number of images in female
trainf_num= len([file for file in os.listdir(female_train_path) if file.endswith('.jpg')])
trainm_num =len([file for file in os.listdir(male_train_path) if file.endswith('.jpg')])
testf_num=len([file for file in os.listdir(female_test_path) if file.endswith('.jpg')])
testm_num=len([file for file in os.listdir(male_test_path) if file.endswith('.jpg')])

train_num=trainf_num+trainm_num
test_num=testf_num+testm_num

num_imagesF = trainf_num+testf_num
num_imagesM = trainm_num+testm_num
# Create a bar plot
fig, ax = plt.subplots(figsize=(4, 4))
ax.bar(['Female', 'Male'], [num_imagesF, num_imagesM])
ax.set_ylabel('Number of Images')
ax.set_title('Number of Images in Classes')
plt.show()

"""PreProcessing"""

train_datagen = ImageDataGenerator( rescale=1./255,rotation_range=30,shear_range=0.3,zoom_range=0.3)
test_datagen = ImageDataGenerator(rescale=1./255)

train_ds = train_datagen.flow_from_directory('/content/drive/MyDrive/DL Project/Dataset/Train', target_size = (64, 64), batch_size = 32,class_mode = 'binary')
test_ds = test_datagen.flow_from_directory('/content/drive/MyDrive/DL Project/Dataset/Test', target_size = (64, 64), batch_size = 32,class_mode = 'binary')

train_ds = train_datagen.flow_from_directory('/content/drive/MyDrive/DL Project/Dataset/SampleTrain', target_size = (64, 64), batch_size = 32,class_mode = 'binary')
test_ds = test_datagen.flow_from_directory('/content/drive/MyDrive/DL Project/Dataset/SampleTest', target_size = (64, 64), batch_size = 32,class_mode = 'binary')

train_ds.image_shape
test_ds.image_shape

"""CNN"""

model = Sequential()

model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 3)))
model.add(Conv2D(32, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Flatten())
model.add(Dense(256, activation='relu'))
model.add(Dense(1, activation='softmax'))

sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)
model.compile(loss='binary_crossentropy', metrics=['accuracy',tf.keras.metrics.Precision()], optimizer=sgd)

history = model.fit(train_ds,batch_size=32, epochs=15, verbose=2)
score1 = model.evaluate(test_ds, batch_size=32, verbose=0)
print(model.metrics_names)
print(score1)

"""Improvment 1"""

model = Sequential()
model.add(Conv2D(32, (2, 2), input_shape=(64,64,3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(32, (2, 2)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(64, (2, 2)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Flatten())
model.add(Dense(64))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(1))
model.add(Activation('sigmoid'))
model.compile(loss='binary_crossentropy', metrics=['accuracy',tf.keras.metrics.Precision(),tf.keras.metrics.Recall()], optimizer='rmsprop')

history = model.fit(train_ds,batch_size=32, epochs=15, verbose=2)
score1 = model.evaluate(test_ds, batch_size=32, verbose=0)
print(model.metrics_names)
print(score1)

"""Improvment 2"""

model = Sequential()
model.add(Conv2D(32, (2, 2), input_shape=(64,64,3)))
model.add(Activation('linear'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(32, (2, 2)))
model.add(Activation('linear'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(64, (2, 2)))
model.add(Activation('linear'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Flatten())
model.add(Dense(64))
model.add(Activation('linear'))
model.add(Dropout(0.5))
model.add(Dense(1))
model.add(Activation('sigmoid'))
sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)
model.compile(loss='binary_crossentropy', metrics=['accuracy',tf.keras.metrics.Precision(),tf.keras.metrics.Recall()], optimizer='rmsprop')

history = model.fit(train_ds,batch_size=32, epochs=10, verbose=2)
score1 = model.evaluate(test_ds, batch_size=32, verbose=0)
print(model.metrics_names)
print(score1)

"""1st Model Compare MLP"""

model = Sequential()
model.add(Flatten(input_shape=(64,64,3)))
model.add(Dense(256, activation='relu'))
model.add(Dense(128, activation='relu'))
model.add(Dense(1,activation='sigmoid'))
model.compile(loss='binary_crossentropy', metrics=['accuracy',tf.keras.metrics.Precision(),tf.keras.metrics.Recall()], optimizer='adam')

history = model.fit(train_ds,batch_size=32, epochs=10, verbose=2)
score1 = model.evaluate(test_ds, batch_size=32, verbose=0)
print(model.metrics_names)
print(score1)

"""2nd Model Compare LSTM"""

model = Sequential()
model.add(LSTM(units= 4,input_shape=(64,3),return_sequences=True))
model.add(Dense(1,activation='sigmoid'))
model.compile(loss='binary_crossentropy', metrics=['accuracy',tf.keras.metrics.Precision(),tf.keras.metrics.Recall()], optimizer='rmsprop')

history = model.fit(train_ds,batch_size=32, epochs=10, verbose=2)
score1 = model.evaluate(test_ds, batch_size=32, verbose=0)
print(model.metrics_names)
print(score1)

"""Visualize Results"""

# create data
df = pd.DataFrame([['CNN', 42, 42, 100, 59], ['CNN - Extra Layers', 89, 84, 92, 88], ['CNN - Parameters Change ', 86, 81, 88, 84],
                   ['MLP', 78, 71, 83, 76],['LSTM',60 ,53 ,61,56 ]],
                  columns=['Model', 'Accuracy', 'Precision', 'Recall', 'F1-Score'])
# plot grouped bar chart
df.plot(x='Model',
        kind='barh',
        stacked=False,
        title='Scores of Models')